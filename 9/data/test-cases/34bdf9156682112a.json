{"uid":"34bdf9156682112a","name":"TD 015 Доставка товара весом до 30кг. в синей зоне","fullName":"tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation#test_positive_delivery_blue_zone_smoke","historyId":"ae12a59ab9fb9a38e23182dccc7cf409","time":{"start":1693506979560,"stop":1693506983025,"duration":3465},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x5588b03b9e23 <unknown>\n#1 0x5588b00e25f6 <unknown>\n#2 0x5588b01221c2 <unknown>\n#3 0x5588b0117599 <unknown>\n#4 0x5588b0142012 <unknown>\n#5 0x5588b0116fb6 <unknown>\n#6 0x5588b01421de <unknown>\n#7 0x5588b015a369 <unknown>\n#8 0x5588b0141de3 <unknown>\n#9 0x5588b0115a7b <unknown>\n#10 0x5588b011681e <unknown>\n#11 0x5588b037b638 <unknown>\n#12 0x5588b037f507 <unknown>\n#13 0x5588b0389c4c <unknown>\n#14 0x5588b0380136 <unknown>\n#15 0x5588b034e9cf <unknown>\n#16 0x5588b03a3b98 <unknown>\n#17 0x5588b03a3d68 <unknown>\n#18 0x5588b03b2cb3 <unknown>\n#19 0x7fa09c4df044 <unknown>","statusTrace":"self = <tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation object at 0x7fd9f5877dd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8cd34de4c350ced8a24244a2f7cd8390\")>\nurl = 'https://sandboxtest.stroyrem-nn.ru/', case_id = 'TD 015'\nlink_item = 'products/shtukaturka-tsementnaya-bergauf-bau-putts-tsement-25kg-56sht'\namount = 1, weight = 30, standard = 650, in_time = 2390, all_time = 3320\n\n    @pytest.mark.parametrize('case_id, link_item, amount, weight, standard, in_time, all_time', [\n        (\"TD 015\", bundeks_25, 1, 30, 650, 2390, 3320),\n        pytest.param(\n            \"TD 016\", aksolit_30, 8, 300, 650, 2390, 3320,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: - - -\")\n        ),\n        (\"TD 017\", aksolit_30, 13, 400, 650, 2390, 3320),\n        (\"TD 018\", aksolit_30, 16, 500, 850, 2490, 3320),\n        (\"TD 019\", aksolit_30, 25, 1700, 1150, 2490, 3320),\n        (\"TD 020\", aksolit_30, 66, 2000, 1500, 2990, 3650),\n        (\"TD 021\", aksolit_30, 149, 4500, 2600, 4380, 4890),\n        (\"TD 022\", aksolit_30, 166, 5000, 2800, 5490, 5980),\n        pytest.param(\n            \"TD 023\", aksolit_30, 206, 6200, 3300, 7500, 8000,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 4300 9900 11440\")\n        ),\n        (\"TD 024\", aksolit_30, 299, 9000, 4300, 9900, 11440),\n        (\"TD 025\", aksolit_30, 333, 10000, 7000, 13900, 15900),\n        pytest.param(\n            \"TD 026\", aksolit_30, 366, 11000, 8000, 14900, 19900,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 7000 13900 15900\")\n        ),\n        pytest.param(\n            \"TD 027\", aksolit_30, 666, 20000, 14000, 16900, 23900,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 7000 13900 15900\")\n        )\n    ])\n    @pytest.mark.smoke\n    def test_positive_delivery_blue_zone_smoke(\n            self, driver, url, case_id, link_item, amount, weight, standard, in_time, all_time\n    ):\n        allure.dynamic.title(f\"{case_id} Доставка товара весом до {weight}кг. в синей зоне\")\n    \n        driver.get(f'{url}{link_item}')\n        item_page = ItemPage(driver)\n>       item_page.add_item_to_cart(amount).click_on_cart()\n\ntests/delivery/test_delivery_calculation.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/item_page.py:40: in add_item_to_cart\n    self.find_element(self._add_item).click()\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd9f518fd50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5588b03a3d68 \\\\u003Cunknown>\\\\n#18 0x5588b03b2cb3 \\\\u003Cunknown>\\\\n#19 0x7fa09c4df044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x5588b03b9e23 <unknown>\nE       #1 0x5588b00e25f6 <unknown>\nE       #2 0x5588b01221c2 <unknown>\nE       #3 0x5588b0117599 <unknown>\nE       #4 0x5588b0142012 <unknown>\nE       #5 0x5588b0116fb6 <unknown>\nE       #6 0x5588b01421de <unknown>\nE       #7 0x5588b015a369 <unknown>\nE       #8 0x5588b0141de3 <unknown>\nE       #9 0x5588b0115a7b <unknown>\nE       #10 0x5588b011681e <unknown>\nE       #11 0x5588b037b638 <unknown>\nE       #12 0x5588b037f507 <unknown>\nE       #13 0x5588b0389c4c <unknown>\nE       #14 0x5588b0380136 <unknown>\nE       #15 0x5588b034e9cf <unknown>\nE       #16 0x5588b03a3b98 <unknown>\nE       #17 0x5588b03a3d68 <unknown>\nE       #18 0x5588b03b2cb3 <unknown>\nE       #19 0x7fa09c4df044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693506779518,"stop":1693506779597,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1693506779597,"stop":1693506779597,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver","time":{"start":1693506978719,"stop":1693506979558,"duration":839},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setup","time":{"start":1693506979559,"stop":1693506979559,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x5588b03b9e23 <unknown>\n#1 0x5588b00e25f6 <unknown>\n#2 0x5588b01221c2 <unknown>\n#3 0x5588b0117599 <unknown>\n#4 0x5588b0142012 <unknown>\n#5 0x5588b0116fb6 <unknown>\n#6 0x5588b01421de <unknown>\n#7 0x5588b015a369 <unknown>\n#8 0x5588b0141de3 <unknown>\n#9 0x5588b0115a7b <unknown>\n#10 0x5588b011681e <unknown>\n#11 0x5588b037b638 <unknown>\n#12 0x5588b037f507 <unknown>\n#13 0x5588b0389c4c <unknown>\n#14 0x5588b0380136 <unknown>\n#15 0x5588b034e9cf <unknown>\n#16 0x5588b03a3b98 <unknown>\n#17 0x5588b03a3d68 <unknown>\n#18 0x5588b03b2cb3 <unknown>\n#19 0x7fa09c4df044 <unknown>","statusTrace":"self = <tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation object at 0x7fd9f5877dd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8cd34de4c350ced8a24244a2f7cd8390\")>\nurl = 'https://sandboxtest.stroyrem-nn.ru/', case_id = 'TD 015'\nlink_item = 'products/shtukaturka-tsementnaya-bergauf-bau-putts-tsement-25kg-56sht'\namount = 1, weight = 30, standard = 650, in_time = 2390, all_time = 3320\n\n    @pytest.mark.parametrize('case_id, link_item, amount, weight, standard, in_time, all_time', [\n        (\"TD 015\", bundeks_25, 1, 30, 650, 2390, 3320),\n        pytest.param(\n            \"TD 016\", aksolit_30, 8, 300, 650, 2390, 3320,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: - - -\")\n        ),\n        (\"TD 017\", aksolit_30, 13, 400, 650, 2390, 3320),\n        (\"TD 018\", aksolit_30, 16, 500, 850, 2490, 3320),\n        (\"TD 019\", aksolit_30, 25, 1700, 1150, 2490, 3320),\n        (\"TD 020\", aksolit_30, 66, 2000, 1500, 2990, 3650),\n        (\"TD 021\", aksolit_30, 149, 4500, 2600, 4380, 4890),\n        (\"TD 022\", aksolit_30, 166, 5000, 2800, 5490, 5980),\n        pytest.param(\n            \"TD 023\", aksolit_30, 206, 6200, 3300, 7500, 8000,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 4300 9900 11440\")\n        ),\n        (\"TD 024\", aksolit_30, 299, 9000, 4300, 9900, 11440),\n        (\"TD 025\", aksolit_30, 333, 10000, 7000, 13900, 15900),\n        pytest.param(\n            \"TD 026\", aksolit_30, 366, 11000, 8000, 14900, 19900,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 7000 13900 15900\")\n        ),\n        pytest.param(\n            \"TD 027\", aksolit_30, 666, 20000, 14000, 16900, 23900,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 7000 13900 15900\")\n        )\n    ])\n    @pytest.mark.smoke\n    def test_positive_delivery_blue_zone_smoke(\n            self, driver, url, case_id, link_item, amount, weight, standard, in_time, all_time\n    ):\n        allure.dynamic.title(f\"{case_id} Доставка товара весом до {weight}кг. в синей зоне\")\n    \n        driver.get(f'{url}{link_item}')\n        item_page = ItemPage(driver)\n>       item_page.add_item_to_cart(amount).click_on_cart()\n\ntests/delivery/test_delivery_calculation.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/item_page.py:40: in add_item_to_cart\n    self.find_element(self._add_item).click()\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd9f518fd50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5588b03a3d68 \\\\u003Cunknown>\\\\n#18 0x5588b03b2cb3 \\\\u003Cunknown>\\\\n#19 0x7fa09c4df044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x5588b03b9e23 <unknown>\nE       #1 0x5588b00e25f6 <unknown>\nE       #2 0x5588b01221c2 <unknown>\nE       #3 0x5588b0117599 <unknown>\nE       #4 0x5588b0142012 <unknown>\nE       #5 0x5588b0116fb6 <unknown>\nE       #6 0x5588b01421de <unknown>\nE       #7 0x5588b015a369 <unknown>\nE       #8 0x5588b0141de3 <unknown>\nE       #9 0x5588b0115a7b <unknown>\nE       #10 0x5588b011681e <unknown>\nE       #11 0x5588b037b638 <unknown>\nE       #12 0x5588b037f507 <unknown>\nE       #13 0x5588b0389c4c <unknown>\nE       #14 0x5588b0380136 <unknown>\nE       #15 0x5588b034e9cf <unknown>\nE       #16 0x5588b03a3b98 <unknown>\nE       #17 0x5588b03a3d68 <unknown>\nE       #18 0x5588b03b2cb3 <unknown>\nE       #19 0x7fa09c4df044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementNotInteractableException","steps":[{"name":"Добавляем товар в корзину в количестве 1","time":{"start":1693506982995,"stop":1693506983024,"duration":29},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x5588b03b9e23 <unknown>\n#1 0x5588b00e25f6 <unknown>\n#2 0x5588b01221c2 <unknown>\n#3 0x5588b0117599 <unknown>\n#4 0x5588b0142012 <unknown>\n#5 0x5588b0116fb6 <unknown>\n#6 0x5588b01421de <unknown>\n#7 0x5588b015a369 <unknown>\n#8 0x5588b0141de3 <unknown>\n#9 0x5588b0115a7b <unknown>\n#10 0x5588b011681e <unknown>\n#11 0x5588b037b638 <unknown>\n#12 0x5588b037f507 <unknown>\n#13 0x5588b0389c4c <unknown>\n#14 0x5588b0380136 <unknown>\n#15 0x5588b034e9cf <unknown>\n#16 0x5588b03a3b98 <unknown>\n#17 0x5588b03a3d68 <unknown>\n#18 0x5588b03b2cb3 <unknown>\n#19 0x7fa09c4df044 <unknown>\n\n","statusTrace":"  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/app/pages/item_page.py\", line 40, in add_item_to_cart\n    self.find_element(self._add_item).click()\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"amount","value":"1"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"6e8d7a2ca8d6f4b1","name":"Screenshot","source":"6e8d7a2ca8d6f4b1.png","type":"image/png","size":258658},{"uid":"68c663c52f031a8a","name":"HTML source","source":"68c663c52f031a8a.html","type":"text/html","size":142845}],"parameters":[],"stepsCount":1,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1693506983229,"stop":1693506983229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver::0","time":{"start":1693506983229,"stop":1693506983287,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"epic","value":"Delivery Page - calculation"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.delivery"},{"name":"suite","value":"test_delivery_calculation"},{"name":"subSuite","value":"TestDeliveryPageCalculation"},{"name":"host","value":"91d3efd9b5d6"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.delivery.test_delivery_calculation"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"all_time","value":"3320"},{"name":"amount","value":"1"},{"name":"case_id","value":"'TD 015'"},{"name":"in_time","value":"2390"},{"name":"link_item","value":"'products/shtukaturka-tsementnaya-bergauf-bau-putts-tsement-25kg-56sht'"},{"name":"standard","value":"650"},{"name":"url","value":"'https://sandboxtest.stroyrem-nn.ru/'"},{"name":"weight","value":"30"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["smoke"]},"source":"34bdf9156682112a.json","parameterValues":["3320","1","'TD 015'","2390","'products/shtukaturka-tsementnaya-bergauf-bau-putts-tsement-25kg-56sht'","650","'https://sandboxtest.stroyrem-nn.ru/'","30"]}