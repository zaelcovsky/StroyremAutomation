{"uid":"d1c0e8773a10140b","name":"positive_discount_for_unauthorized_customer_purchase_amount_10000_to_14999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_10000_to_14999rub_smoke","historyId":"fd3dac514beac2a104acb88cf11d7062","time":{"start":1694049362327,"stop":1694049364787,"duration":2460},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x556519d7ce23 <unknown>\n#1 0x556519aa57a7 <unknown>\n#2 0x556519ae9d22 <unknown>\n#3 0x556519ae8267 <unknown>\n#4 0x556519ae61e8 <unknown>\n#5 0x556519ae532d <unknown>\n#6 0x556519ada599 <unknown>\n#7 0x556519b05012 <unknown>\n#8 0x556519ad9fb6 <unknown>\n#9 0x556519b051de <unknown>\n#10 0x556519b1d369 <unknown>\n#11 0x556519b04de3 <unknown>\n#12 0x556519ad8a7b <unknown>\n#13 0x556519ad981e <unknown>\n#14 0x556519d3e638 <unknown>\n#15 0x556519d42507 <unknown>\n#16 0x556519d4cc4c <unknown>\n#17 0x556519d43136 <unknown>\n#18 0x556519d119cf <unknown>\n#19 0x556519d66b98 <unknown>\n#20 0x556519d66d68 <unknown>\n#21 0x556519d75cb3 <unknown>\n#22 0x7fb30c622044 <unknown>","statusTrace":"self = <test_products_on_sale_page.TestProductsOnSalePage object at 0x7f5791751e90>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f5790414850>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_10000_to_14999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_10000_to_14999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(10000)\n        product_page_open.get_field_price_last().send_keys(14999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5790be0890>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x556519d66d68 \\\\u003Cunknown>\\\\n#21 0x556519d75cb3 \\\\u003Cunknown>\\\\n#22 0x7fb30c622044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x556519d7ce23 <unknown>\nE       #1 0x556519aa57a7 <unknown>\nE       #2 0x556519ae9d22 <unknown>\nE       #3 0x556519ae8267 <unknown>\nE       #4 0x556519ae61e8 <unknown>\nE       #5 0x556519ae532d <unknown>\nE       #6 0x556519ada599 <unknown>\nE       #7 0x556519b05012 <unknown>\nE       #8 0x556519ad9fb6 <unknown>\nE       #9 0x556519b051de <unknown>\nE       #10 0x556519b1d369 <unknown>\nE       #11 0x556519b04de3 <unknown>\nE       #12 0x556519ad8a7b <unknown>\nE       #13 0x556519ad981e <unknown>\nE       #14 0x556519d3e638 <unknown>\nE       #15 0x556519d42507 <unknown>\nE       #16 0x556519d4cc4c <unknown>\nE       #17 0x556519d43136 <unknown>\nE       #18 0x556519d119cf <unknown>\nE       #19 0x556519d66b98 <unknown>\nE       #20 0x556519d66d68 <unknown>\nE       #21 0x556519d75cb3 <unknown>\nE       #22 0x7fb30c622044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1694048388041,"stop":1694048388137,"duration":96},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"clear_allure_results_folder","time":{"start":1694048388137,"stop":1694048388138,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"driver","time":{"start":1694049353882,"stop":1694049354716,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"setup","time":{"start":1694049354716,"stop":1694049354716,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"product_page_open","time":{"start":1694049354717,"stop":1694049362326,"duration":7609},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x556519d7ce23 <unknown>\n#1 0x556519aa57a7 <unknown>\n#2 0x556519ae9d22 <unknown>\n#3 0x556519ae8267 <unknown>\n#4 0x556519ae61e8 <unknown>\n#5 0x556519ae532d <unknown>\n#6 0x556519ada599 <unknown>\n#7 0x556519b05012 <unknown>\n#8 0x556519ad9fb6 <unknown>\n#9 0x556519b051de <unknown>\n#10 0x556519b1d369 <unknown>\n#11 0x556519b04de3 <unknown>\n#12 0x556519ad8a7b <unknown>\n#13 0x556519ad981e <unknown>\n#14 0x556519d3e638 <unknown>\n#15 0x556519d42507 <unknown>\n#16 0x556519d4cc4c <unknown>\n#17 0x556519d43136 <unknown>\n#18 0x556519d119cf <unknown>\n#19 0x556519d66b98 <unknown>\n#20 0x556519d66d68 <unknown>\n#21 0x556519d75cb3 <unknown>\n#22 0x7fb30c622044 <unknown>","statusTrace":"self = <test_products_on_sale_page.TestProductsOnSalePage object at 0x7f5791751e90>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f5790414850>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_10000_to_14999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_10000_to_14999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(10000)\n        product_page_open.get_field_price_last().send_keys(14999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5790be0890>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x556519d66d68 \\\\u003Cunknown>\\\\n#21 0x556519d75cb3 \\\\u003Cunknown>\\\\n#22 0x7fb30c622044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x556519d7ce23 <unknown>\nE       #1 0x556519aa57a7 <unknown>\nE       #2 0x556519ae9d22 <unknown>\nE       #3 0x556519ae8267 <unknown>\nE       #4 0x556519ae61e8 <unknown>\nE       #5 0x556519ae532d <unknown>\nE       #6 0x556519ada599 <unknown>\nE       #7 0x556519b05012 <unknown>\nE       #8 0x556519ad9fb6 <unknown>\nE       #9 0x556519b051de <unknown>\nE       #10 0x556519b1d369 <unknown>\nE       #11 0x556519b04de3 <unknown>\nE       #12 0x556519ad8a7b <unknown>\nE       #13 0x556519ad981e <unknown>\nE       #14 0x556519d3e638 <unknown>\nE       #15 0x556519d42507 <unknown>\nE       #16 0x556519d4cc4c <unknown>\nE       #17 0x556519d43136 <unknown>\nE       #18 0x556519d119cf <unknown>\nE       #19 0x556519d66b98 <unknown>\nE       #20 0x556519d66d68 <unknown>\nE       #21 0x556519d75cb3 <unknown>\nE       #22 0x7fb30c622044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1694049362327,"stop":1694049362398,"duration":71},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1694049362500,"stop":1694049362556,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1694049363637,"stop":1694049363718,"duration":81},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0}],"attachments":[{"uid":"2d7707bd84d60474","name":"Screenshot","source":"2d7707bd84d60474.png","type":"image/png","size":106118},{"uid":"acd6a11fc4d87f40","name":"HTML source","source":"acd6a11fc4d87f40.html","type":"text/html","size":849574}],"parameters":[],"attachmentsCount":2,"hasContent":true,"shouldDisplayMessage":true,"stepsCount":3},"afterStages":[{"name":"setup::0","time":{"start":1694049365043,"stop":1694049365043,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"driver::0","time":{"start":1694049365043,"stop":1694049365111,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"60deaa3afbff"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":7,"unknown":0,"total":8},"items":[{"uid":"9a62c1712f600fe","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/71//#testresult/9a62c1712f600fe","status":"passed","time":{"start":1693963358846,"stop":1693963369560,"duration":10714}},{"uid":"83a832f9cd309c9c","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/70//#testresult/83a832f9cd309c9c","status":"passed","time":{"start":1693876680369,"stop":1693876690884,"duration":10515}},{"uid":"1ee461087cfd5ae1","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/69//#testresult/1ee461087cfd5ae1","status":"passed","time":{"start":1693790677969,"stop":1693790689078,"duration":11109}},{"uid":"6119b5aa8b2ff405","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/68//#testresult/6119b5aa8b2ff405","status":"passed","time":{"start":1693704161345,"stop":1693704171462,"duration":10117}},{"uid":"5fe5d5e7429840af","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/67//#testresult/5fe5d5e7429840af","status":"passed","time":{"start":1693617370039,"stop":1693617380461,"duration":10422}},{"uid":"b6f9907b388bd322","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/66//#testresult/b6f9907b388bd322","status":"passed","time":{"start":1693531230379,"stop":1693531240336,"duration":9957}},{"uid":"eaf2959118813162","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/9//#testresult/eaf2959118813162","status":"passed","time":{"start":1693507278923,"stop":1693507288419,"duration":9496}}]},"tags":["smoke_test"]},"source":"d1c0e8773a10140b.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'"]}