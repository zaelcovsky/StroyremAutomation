{"uid":"704fa52bd2ca70d7","name":"TD 025 Доставка товара весом до 10000кг. в синей зоне","fullName":"tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation#test_positive_delivery_blue_zone_smoke","historyId":"5c91f1b6a5c2e7b4c36fa79019f7f7db","time":{"start":1693616918774,"stop":1693616919000,"duration":226},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x559b3f60fe23 <unknown>\n#1 0x559b3f3387a7 <unknown>\n#2 0x559b3f330829 <unknown>\n#3 0x559b3f3202c2 <unknown>\n#4 0x559b3f3219fb <unknown>\n#5 0x559b3f32069d <unknown>\n#6 0x559b3f31f65c <unknown>\n#7 0x559b3f31f5ce <unknown>\n#8 0x559b3f31e28a <unknown>\n#9 0x559b3f31e6da <unknown>\n#10 0x559b3f33a630 <unknown>\n#11 0x559b3f3b0b15 <unknown>\n#12 0x559b3f398012 <unknown>\n#13 0x559b3f3b0369 <unknown>\n#14 0x559b3f397de3 <unknown>\n#15 0x559b3f36ba7b <unknown>\n#16 0x559b3f36c81e <unknown>\n#17 0x559b3f5d1638 <unknown>\n#18 0x559b3f5d5507 <unknown>\n#19 0x559b3f5dfc4c <unknown>\n#20 0x559b3f5d6136 <unknown>\n#21 0x559b3f5a49cf <unknown>\n#22 0x559b3f5f9b98 <unknown>\n#23 0x559b3f5f9d68 <unknown>\n#24 0x559b3f608cb3 <unknown>\n#25 0x7f6ce9b49044 <unknown>","statusTrace":"self = <tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation object at 0x7ff15659f610>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eda86d2f38540ac7eed093742fb6543a\")>\nurl = 'https://sandboxtest.stroyrem-nn.ru/', case_id = 'TD 025'\nlink_item = 'products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya'\namount = 333, weight = 10000, standard = 7000, in_time = 13900, all_time = 15900\n\n    @pytest.mark.parametrize('case_id, link_item, amount, weight, standard, in_time, all_time', [\n        (\"TD 015\", bundeks_25, 1, 30, 650, 2390, 3320),\n        pytest.param(\n            \"TD 016\", aksolit_30, 8, 300, 650, 2390, 3320,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: - - -\")\n        ),\n        (\"TD 017\", aksolit_30, 13, 400, 650, 2390, 3320),\n        (\"TD 018\", aksolit_30, 16, 500, 850, 2490, 3320),\n        (\"TD 019\", aksolit_30, 25, 1700, 1150, 2490, 3320),\n        (\"TD 020\", aksolit_30, 66, 2000, 1500, 2990, 3650),\n        (\"TD 021\", aksolit_30, 149, 4500, 2600, 4380, 4890),\n        (\"TD 022\", aksolit_30, 166, 5000, 2800, 5490, 5980),\n        pytest.param(\n            \"TD 023\", aksolit_30, 206, 6200, 3300, 7500, 8000,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 4300 9900 11440\")\n        ),\n        (\"TD 024\", aksolit_30, 299, 9000, 4300, 9900, 11440),\n        (\"TD 025\", aksolit_30, 333, 10000, 7000, 13900, 15900),\n        pytest.param(\n            \"TD 026\", aksolit_30, 366, 11000, 8000, 14900, 19900,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 7000 13900 15900\")\n        ),\n        pytest.param(\n            \"TD 027\", aksolit_30, 666, 20000, 14000, 16900, 23900,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 7000 13900 15900\")\n        )\n    ])\n    @pytest.mark.smoke\n    def test_positive_delivery_blue_zone_smoke(\n            self, driver, url, case_id, link_item, amount, weight, standard, in_time, all_time\n    ):\n        allure.dynamic.title(f\"{case_id} Доставка товара весом до {weight}кг. в синей зоне\")\n    \n>       driver.get(f'{url}{link_item}')\n\ntests/delivery/test_delivery_calculation.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:355: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff155f4e010>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x559b3f5f9d68 \\\\u003Cunknown>\\\\n#24 0x559b3f608cb3 \\\\u003Cunknown>\\\\n#25 0x7f6ce9b49044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x559b3f60fe23 <unknown>\nE       #1 0x559b3f3387a7 <unknown>\nE       #2 0x559b3f330829 <unknown>\nE       #3 0x559b3f3202c2 <unknown>\nE       #4 0x559b3f3219fb <unknown>\nE       #5 0x559b3f32069d <unknown>\nE       #6 0x559b3f31f65c <unknown>\nE       #7 0x559b3f31f5ce <unknown>\nE       #8 0x559b3f31e28a <unknown>\nE       #9 0x559b3f31e6da <unknown>\nE       #10 0x559b3f33a630 <unknown>\nE       #11 0x559b3f3b0b15 <unknown>\nE       #12 0x559b3f398012 <unknown>\nE       #13 0x559b3f3b0369 <unknown>\nE       #14 0x559b3f397de3 <unknown>\nE       #15 0x559b3f36ba7b <unknown>\nE       #16 0x559b3f36c81e <unknown>\nE       #17 0x559b3f5d1638 <unknown>\nE       #18 0x559b3f5d5507 <unknown>\nE       #19 0x559b3f5dfc4c <unknown>\nE       #20 0x559b3f5d6136 <unknown>\nE       #21 0x559b3f5a49cf <unknown>\nE       #22 0x559b3f5f9b98 <unknown>\nE       #23 0x559b3f5f9d68 <unknown>\nE       #24 0x559b3f608cb3 <unknown>\nE       #25 0x7f6ce9b49044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693616289771,"stop":1693616289876,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1693616289877,"stop":1693616289877,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1693616917938,"stop":1693616918772,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1693616918773,"stop":1693616918773,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x559b3f60fe23 <unknown>\n#1 0x559b3f3387a7 <unknown>\n#2 0x559b3f330829 <unknown>\n#3 0x559b3f3202c2 <unknown>\n#4 0x559b3f3219fb <unknown>\n#5 0x559b3f32069d <unknown>\n#6 0x559b3f31f65c <unknown>\n#7 0x559b3f31f5ce <unknown>\n#8 0x559b3f31e28a <unknown>\n#9 0x559b3f31e6da <unknown>\n#10 0x559b3f33a630 <unknown>\n#11 0x559b3f3b0b15 <unknown>\n#12 0x559b3f398012 <unknown>\n#13 0x559b3f3b0369 <unknown>\n#14 0x559b3f397de3 <unknown>\n#15 0x559b3f36ba7b <unknown>\n#16 0x559b3f36c81e <unknown>\n#17 0x559b3f5d1638 <unknown>\n#18 0x559b3f5d5507 <unknown>\n#19 0x559b3f5dfc4c <unknown>\n#20 0x559b3f5d6136 <unknown>\n#21 0x559b3f5a49cf <unknown>\n#22 0x559b3f5f9b98 <unknown>\n#23 0x559b3f5f9d68 <unknown>\n#24 0x559b3f608cb3 <unknown>\n#25 0x7f6ce9b49044 <unknown>","statusTrace":"self = <tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation object at 0x7ff15659f610>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eda86d2f38540ac7eed093742fb6543a\")>\nurl = 'https://sandboxtest.stroyrem-nn.ru/', case_id = 'TD 025'\nlink_item = 'products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya'\namount = 333, weight = 10000, standard = 7000, in_time = 13900, all_time = 15900\n\n    @pytest.mark.parametrize('case_id, link_item, amount, weight, standard, in_time, all_time', [\n        (\"TD 015\", bundeks_25, 1, 30, 650, 2390, 3320),\n        pytest.param(\n            \"TD 016\", aksolit_30, 8, 300, 650, 2390, 3320,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: - - -\")\n        ),\n        (\"TD 017\", aksolit_30, 13, 400, 650, 2390, 3320),\n        (\"TD 018\", aksolit_30, 16, 500, 850, 2490, 3320),\n        (\"TD 019\", aksolit_30, 25, 1700, 1150, 2490, 3320),\n        (\"TD 020\", aksolit_30, 66, 2000, 1500, 2990, 3650),\n        (\"TD 021\", aksolit_30, 149, 4500, 2600, 4380, 4890),\n        (\"TD 022\", aksolit_30, 166, 5000, 2800, 5490, 5980),\n        pytest.param(\n            \"TD 023\", aksolit_30, 206, 6200, 3300, 7500, 8000,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 4300 9900 11440\")\n        ),\n        (\"TD 024\", aksolit_30, 299, 9000, 4300, 9900, 11440),\n        (\"TD 025\", aksolit_30, 333, 10000, 7000, 13900, 15900),\n        pytest.param(\n            \"TD 026\", aksolit_30, 366, 11000, 8000, 14900, 19900,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 7000 13900 15900\")\n        ),\n        pytest.param(\n            \"TD 027\", aksolit_30, 666, 20000, 14000, 16900, 23900,\n            marks=pytest.mark.xfail(reson=\"Цена доставки: 7000 13900 15900\")\n        )\n    ])\n    @pytest.mark.smoke\n    def test_positive_delivery_blue_zone_smoke(\n            self, driver, url, case_id, link_item, amount, weight, standard, in_time, all_time\n    ):\n        allure.dynamic.title(f\"{case_id} Доставка товара весом до {weight}кг. в синей зоне\")\n    \n>       driver.get(f'{url}{link_item}')\n\ntests/delivery/test_delivery_calculation.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:355: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff155f4e010>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x559b3f5f9d68 \\\\u003Cunknown>\\\\n#24 0x559b3f608cb3 \\\\u003Cunknown>\\\\n#25 0x7f6ce9b49044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x559b3f60fe23 <unknown>\nE       #1 0x559b3f3387a7 <unknown>\nE       #2 0x559b3f330829 <unknown>\nE       #3 0x559b3f3202c2 <unknown>\nE       #4 0x559b3f3219fb <unknown>\nE       #5 0x559b3f32069d <unknown>\nE       #6 0x559b3f31f65c <unknown>\nE       #7 0x559b3f31f5ce <unknown>\nE       #8 0x559b3f31e28a <unknown>\nE       #9 0x559b3f31e6da <unknown>\nE       #10 0x559b3f33a630 <unknown>\nE       #11 0x559b3f3b0b15 <unknown>\nE       #12 0x559b3f398012 <unknown>\nE       #13 0x559b3f3b0369 <unknown>\nE       #14 0x559b3f397de3 <unknown>\nE       #15 0x559b3f36ba7b <unknown>\nE       #16 0x559b3f36c81e <unknown>\nE       #17 0x559b3f5d1638 <unknown>\nE       #18 0x559b3f5d5507 <unknown>\nE       #19 0x559b3f5dfc4c <unknown>\nE       #20 0x559b3f5d6136 <unknown>\nE       #21 0x559b3f5a49cf <unknown>\nE       #22 0x559b3f5f9b98 <unknown>\nE       #23 0x559b3f5f9d68 <unknown>\nE       #24 0x559b3f608cb3 <unknown>\nE       #25 0x7f6ce9b49044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: WebDriverException","steps":[],"attachments":[{"uid":"4cc2ce33fa65449e","name":"Screenshot","source":"4cc2ce33fa65449e.png","type":"image/png","size":5862},{"uid":"51864bc3b620ffe6","name":"HTML source","source":"51864bc3b620ffe6.html","type":"text/html","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1693616919165,"stop":1693616919222,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup::0","time":{"start":1693616919165,"stop":1693616919165,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Delivery Page - calculation"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.delivery"},{"name":"suite","value":"test_delivery_calculation"},{"name":"subSuite","value":"TestDeliveryPageCalculation"},{"name":"host","value":"81ae5f2e7e77"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.delivery.test_delivery_calculation"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"all_time","value":"15900"},{"name":"amount","value":"333"},{"name":"case_id","value":"'TD 025'"},{"name":"in_time","value":"13900"},{"name":"link_item","value":"'products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya'"},{"name":"standard","value":"7000"},{"name":"url","value":"'https://sandboxtest.stroyrem-nn.ru/'"},{"name":"weight","value":"10000"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"d7a5d022c2d2a2d2","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/66//#testresult/d7a5d022c2d2a2d2","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x55b790267e23 <unknown>\n#1 0x55b78ff907a7 <unknown>\n#2 0x55b78ff88829 <unknown>\n#3 0x55b78ff782c2 <unknown>\n#4 0x55b78ff799fb <unknown>\n#5 0x55b78ff7869d <unknown>\n#6 0x55b78ff7765c <unknown>\n#7 0x55b78ff775ce <unknown>\n#8 0x55b78ff7628a <unknown>\n#9 0x55b78ff766da <unknown>\n#10 0x55b78ff92630 <unknown>\n#11 0x55b790008b15 <unknown>\n#12 0x55b78fff0012 <unknown>\n#13 0x55b790008369 <unknown>\n#14 0x55b78ffefde3 <unknown>\n#15 0x55b78ffc3a7b <unknown>\n#16 0x55b78ffc481e <unknown>\n#17 0x55b790229638 <unknown>\n#18 0x55b79022d507 <unknown>\n#19 0x55b790237c4c <unknown>\n#20 0x55b79022e136 <unknown>\n#21 0x55b7901fc9cf <unknown>\n#22 0x55b790251b98 <unknown>\n#23 0x55b790251d68 <unknown>\n#24 0x55b790260cb3 <unknown>\n#25 0x7fb732f08044 <unknown>","time":{"start":1693530817425,"stop":1693530817618,"duration":193}},{"uid":"21f8fa7f75209a1a","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/9//#testresult/21f8fa7f75209a1a","status":"broken","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x555ea9399e23 <unknown>\n#1 0x555ea90c25f6 <unknown>\n#2 0x555ea90f8c5d <unknown>\n#3 0x555ea9122012 <unknown>\n#4 0x555ea90f6fb6 <unknown>\n#5 0x555ea91221de <unknown>\n#6 0x555ea913a369 <unknown>\n#7 0x555ea9121de3 <unknown>\n#8 0x555ea90f5a7b <unknown>\n#9 0x555ea90f681e <unknown>\n#10 0x555ea935b638 <unknown>\n#11 0x555ea935f507 <unknown>\n#12 0x555ea9369c4c <unknown>\n#13 0x555ea9360136 <unknown>\n#14 0x555ea932e9cf <unknown>\n#15 0x555ea9383b98 <unknown>\n#16 0x555ea9383d68 <unknown>\n#17 0x555ea9392cb3 <unknown>\n#18 0x7fd336e4f044 <unknown>","time":{"start":1693507026774,"stop":1693507030540,"duration":3766}}]},"tags":["smoke"]},"source":"704fa52bd2ca70d7.json","parameterValues":["15900","333","'TD 025'","13900","'products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya'","7000","'https://sandboxtest.stroyrem-nn.ru/'","10000"]}