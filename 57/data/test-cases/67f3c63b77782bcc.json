{"uid":"67f3c63b77782bcc","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_10000_14999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_10000_14999rub_smoke","historyId":"5a6e8826f1b547a3dd78f99266c49e5a","time":{"start":1692752943126,"stop":1692752952390,"duration":9264},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <input type=\"text\" class=\"price-from\" name=\"price_first\" value=\"\" placeholder=\"16\">\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x5563e8228e23 <unknown>\n#1 0x5563e7f517a7 <unknown>\n#2 0x5563e7f95d22 <unknown>\n#3 0x5563e7f94267 <unknown>\n#4 0x5563e7f921e8 <unknown>\n#5 0x5563e7f9132d <unknown>\n#6 0x5563e7f86599 <unknown>\n#7 0x5563e7fb1012 <unknown>\n#8 0x5563e7f85fb6 <unknown>\n#9 0x5563e7fb11de <unknown>\n#10 0x5563e7fc9369 <unknown>\n#11 0x5563e7fb0de3 <unknown>\n#12 0x5563e7f84a7b <unknown>\n#13 0x5563e7f8581e <unknown>\n#14 0x5563e81ea638 <unknown>\n#15 0x5563e81ee507 <unknown>\n#16 0x5563e81f8c4c <unknown>\n#17 0x5563e81ef136 <unknown>\n#18 0x5563e81bd9cf <unknown>\n#19 0x5563e8212b98 <unknown>\n#20 0x5563e8212d68 <unknown>\n#21 0x5563e8221cb3 <unknown>\n#22 0x7fa4042ec044 <unknown>","statusTrace":"self = <test_products_on_sale_page.TestProductsOnSalePage object at 0x7f081dc37dd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"de0670d77b811511e76e2f077f9564bf\")>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_10000_14999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_10000_14999rub_smoke(self, driver, link):\n        page = ProductsOnSale(driver)\n        driver.get(link)\n        page.get_field_price_first().send_keys(10000)\n        page.get_field_price_last().send_keys(14999)\n>       page.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f081df53e10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5563e8212d68 \\\\u003Cunknown>\\\\n#21 0x5563e8221cb3 \\\\u003Cunknown>\\\\n#22 0x7fa4042ec044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <input type=\"text\" class=\"price-from\" name=\"price_first\" value=\"\" placeholder=\"16\">\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x5563e8228e23 <unknown>\nE       #1 0x5563e7f517a7 <unknown>\nE       #2 0x5563e7f95d22 <unknown>\nE       #3 0x5563e7f94267 <unknown>\nE       #4 0x5563e7f921e8 <unknown>\nE       #5 0x5563e7f9132d <unknown>\nE       #6 0x5563e7f86599 <unknown>\nE       #7 0x5563e7fb1012 <unknown>\nE       #8 0x5563e7f85fb6 <unknown>\nE       #9 0x5563e7fb11de <unknown>\nE       #10 0x5563e7fc9369 <unknown>\nE       #11 0x5563e7fb0de3 <unknown>\nE       #12 0x5563e7f84a7b <unknown>\nE       #13 0x5563e7f8581e <unknown>\nE       #14 0x5563e81ea638 <unknown>\nE       #15 0x5563e81ee507 <unknown>\nE       #16 0x5563e81f8c4c <unknown>\nE       #17 0x5563e81ef136 <unknown>\nE       #18 0x5563e81bd9cf <unknown>\nE       #19 0x5563e8212b98 <unknown>\nE       #20 0x5563e8212d68 <unknown>\nE       #21 0x5563e8221cb3 <unknown>\nE       #22 0x7fa4042ec044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1692752326659,"stop":1692752326737,"duration":78},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1692752326738,"stop":1692752326738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver","time":{"start":1692752942323,"stop":1692752943125,"duration":802},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setup","time":{"start":1692752943125,"stop":1692752943125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <input type=\"text\" class=\"price-from\" name=\"price_first\" value=\"\" placeholder=\"16\">\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x5563e8228e23 <unknown>\n#1 0x5563e7f517a7 <unknown>\n#2 0x5563e7f95d22 <unknown>\n#3 0x5563e7f94267 <unknown>\n#4 0x5563e7f921e8 <unknown>\n#5 0x5563e7f9132d <unknown>\n#6 0x5563e7f86599 <unknown>\n#7 0x5563e7fb1012 <unknown>\n#8 0x5563e7f85fb6 <unknown>\n#9 0x5563e7fb11de <unknown>\n#10 0x5563e7fc9369 <unknown>\n#11 0x5563e7fb0de3 <unknown>\n#12 0x5563e7f84a7b <unknown>\n#13 0x5563e7f8581e <unknown>\n#14 0x5563e81ea638 <unknown>\n#15 0x5563e81ee507 <unknown>\n#16 0x5563e81f8c4c <unknown>\n#17 0x5563e81ef136 <unknown>\n#18 0x5563e81bd9cf <unknown>\n#19 0x5563e8212b98 <unknown>\n#20 0x5563e8212d68 <unknown>\n#21 0x5563e8221cb3 <unknown>\n#22 0x7fa4042ec044 <unknown>","statusTrace":"self = <test_products_on_sale_page.TestProductsOnSalePage object at 0x7f081dc37dd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"de0670d77b811511e76e2f077f9564bf\")>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_10000_14999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_10000_14999rub_smoke(self, driver, link):\n        page = ProductsOnSale(driver)\n        driver.get(link)\n        page.get_field_price_first().send_keys(10000)\n        page.get_field_price_last().send_keys(14999)\n>       page.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f081df53e10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5563e8212d68 \\\\u003Cunknown>\\\\n#21 0x5563e8221cb3 \\\\u003Cunknown>\\\\n#22 0x7fa4042ec044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <input type=\"text\" class=\"price-from\" name=\"price_first\" value=\"\" placeholder=\"16\">\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x5563e8228e23 <unknown>\nE       #1 0x5563e7f517a7 <unknown>\nE       #2 0x5563e7f95d22 <unknown>\nE       #3 0x5563e7f94267 <unknown>\nE       #4 0x5563e7f921e8 <unknown>\nE       #5 0x5563e7f9132d <unknown>\nE       #6 0x5563e7f86599 <unknown>\nE       #7 0x5563e7fb1012 <unknown>\nE       #8 0x5563e7f85fb6 <unknown>\nE       #9 0x5563e7fb11de <unknown>\nE       #10 0x5563e7fc9369 <unknown>\nE       #11 0x5563e7fb0de3 <unknown>\nE       #12 0x5563e7f84a7b <unknown>\nE       #13 0x5563e7f8581e <unknown>\nE       #14 0x5563e81ea638 <unknown>\nE       #15 0x5563e81ee507 <unknown>\nE       #16 0x5563e81f8c4c <unknown>\nE       #17 0x5563e81ef136 <unknown>\nE       #18 0x5563e81bd9cf <unknown>\nE       #19 0x5563e8212b98 <unknown>\nE       #20 0x5563e8212d68 <unknown>\nE       #21 0x5563e8221cb3 <unknown>\nE       #22 0x7fa4042ec044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1692752950963,"stop":1692752951026,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1692752951113,"stop":1692752951170,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Проверяем видимость кнопки 'На складе'","time":{"start":1692752951242,"stop":1692752951294,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[{"uid":"a45d55be860fa2b8","name":"Screenshot","source":"a45d55be860fa2b8.png","type":"image/png","size":44341},{"uid":"e7abdfc04d0803b0","name":"HTML source","source":"e7abdfc04d0803b0.html","type":"text/html","size":563414}],"parameters":[],"stepsCount":3,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1692752952614,"stop":1692752952615,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver::0","time":{"start":1692752952615,"stop":1692752952683,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"0d09e66095fc"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":7,"unknown":0,"total":9},"items":[{"uid":"6d34b5a15c1d5e71","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/56//#testresult/6d34b5a15c1d5e71","status":"passed","time":{"start":1692666520918,"stop":1692666533520,"duration":12602}},{"uid":"dd2631aab075a11c","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/55//#testresult/dd2631aab075a11c","status":"passed","time":{"start":1692580035477,"stop":1692580047341,"duration":11864}},{"uid":"cdee1d42d752d0d9","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/54//#testresult/cdee1d42d752d0d9","status":"passed","time":{"start":1692493824284,"stop":1692493836799,"duration":12515}},{"uid":"3c5262fc75386ec8","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/53//#testresult/3c5262fc75386ec8","status":"passed","time":{"start":1692407223186,"stop":1692407236883,"duration":13697}},{"uid":"f5f2f9d1e4ff9abb","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/52//#testresult/f5f2f9d1e4ff9abb","status":"passed","time":{"start":1692320946252,"stop":1692320959951,"duration":13699}},{"uid":"468cecec40650dcf","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/51//#testresult/468cecec40650dcf","status":"passed","time":{"start":1692234416653,"stop":1692234428686,"duration":12033}},{"uid":"b2b08473032c2271","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/50//#testresult/b2b08473032c2271","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1692148244071,"stop":1692148274743,"duration":30672}},{"uid":"24b01ec3160bebe3","reportUrl":"https://zaelcovsky.github.io/StroyremAutomation/49//#testresult/24b01ec3160bebe3","status":"passed","time":{"start":1692061656513,"stop":1692061670321,"duration":13808}}]},"tags":["smoke_test"]},"source":"67f3c63b77782bcc.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'"]}